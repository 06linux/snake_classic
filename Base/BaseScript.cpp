#include "Base.h"#include "BaseScript.h"#pragma mark -#pragma mark BaseScriptBaseScript::BaseScript(const char* _fileName){    assert(NULL != _fileName && strlen(_fileName) > 0);        // 保存文件名称    m_fileName = MALLOC(strlen(_fileName)+1, char);    strcpy(m_fileName, _fileName);        // 解析脚本文件    PraseFile(_fileName);        m_lineCurr = 0;    m_lineMax = m_lineData.size();        PrintData();}BaseScript::~BaseScript(){    FREE(m_fileName);}void BaseScript::PraseFile(const char* _fileName){    string pathName = CCFileUtils::getInstance()->fullPathForFilename(_fileName);        ifstream fin(pathName.c_str());    string line;        // 存储一行数据        // 解析每一行数据    while( getline(fin,line))    {        char* pStrLine = MALLOC(line.length()+1, char);        int indexStr = 0;                // 过滤空格和换行        for (int index = 0; index < line.length(); index++)        {            if(line[index] != ' ' &&               line[index] != '\r' &&               line[index] != '\n'               )            {                pStrLine[indexStr++] = line[index];            }        }                // 非空， 非注释信息        if(strlen(pStrLine) > 0 && pStrLine[0] != '#')        {            m_lineData.push_back(string(pStrLine));  // 添加到容器中        }                FREE(pStrLine);    }    }void BaseScript::RunAll(){    for(int i=0; i< m_lineData.size(); i++)    {        m_lineCurr = i;        RunOne();    }}int BaseScript::RunOne(){    if(m_lineCurr < m_lineMax)    {        const char* pStrLine = m_lineData[m_lineCurr++].c_str();        if(IsFunction(pStrLine))        {            PraseFunction(pStrLine);        }        else if(IsVarSet(pStrLine))        {            PraseVar(pStrLine);        }        else        {            printf("BaseScript::RunOne, Error:%d,%s\n",m_lineCurr, pStrLine);        }                if(m_lineCurr == m_lineMax)        {            RunScriptFinish(m_fileName);        }                return m_lineCurr;    }        return (-1);}void BaseScript::RunScriptFun(const char* _funData){#ifdef GAME_DEBUG_MODE    printf("BaseScript::RunScriptFun:%d,%s\n", m_lineCurr, _funData);#endif        // 子类负责实现具体逻辑}void BaseScript::RunScriptVarSet(const char* _key, const char* _value){#ifdef GAME_DEBUG_MODE    printf("BaseScript::RunScriptVarSet:%d, key=%s, value=%s\n", m_lineCurr, _key, _value);#endif        // 子类负责实现具体逻辑}void BaseScript::RunScriptFinish(const char* _fileName){#ifdef GAME_DEBUG_MODE    printf("BaseScript::RunScriptFinish:%s\n", _fileName);#endif        // 子类负责实现具体逻辑}const char* BaseScript::GetFileName(){    return m_fileName;}int BaseScript::GetFunctionNum(const char* _funName){    int retNum = 0;        int nameLen = strlen(_funName);    if(nameLen > 0)    {        for(int i=0; i< m_lineData.size(); i++)        {            const char* pStrLine = m_lineData[i].c_str();            if(IsFunction(pStrLine))            {                if( 0 == strncmp(_funName, pStrLine, nameLen))                {                    retNum++;                }            }        }    }        return retNum;}void BaseScript::SetVar(const char* _key, const char* _value){    if(_key && strlen(_key) > 0 && _value && strlen(_value) > 0 )    {        m_var[_key] = _value;    }}const char* BaseScript::GetVar(const char* _key){    if(_key && strlen(_key) > 0 )    {        string value = m_var[_key];        if(strlen(value.c_str()) > 0)        {            return value.c_str();        }    }        return NULL;}void BaseScript::DelVar(const char* _key){    if(_key && strlen(_key) > 0 )    {        m_var.erase(_key);    }}bool BaseScript::IsFunction(const char* _lineStr){    // 检查是否函数调用， 定义存在 () 字符的数据认为是函数调用    if(_lineStr)    {        int index1 = 0;        // ( 的索引位置        int index2 = 0;        // ) 的索引位置        int index = 0;                while( '\0' != *_lineStr )        {            if('(' == *_lineStr)            {                index1 =  index;            }                        if(')' == *_lineStr)            {                index2 =  index;                break;            }                        index++;            _lineStr++;        }                if(index1 > 0 && index2 > 0 && index2 > index1)        {            return true;        }    }        return false;}bool BaseScript::IsVarSet(const char* _lineStr){    if(_lineStr)    {        int index = 0;        // = 的索引位置        int lineLen = strlen(_lineStr);        while( '\0' != *_lineStr )        {            if('=' == *_lineStr)            {                break;            }                        index++;            _lineStr++;        }                if(index > 0 && index < lineLen -1)        {            return true;        }    }    return false;}void BaseScript::PraseFunction(const char* _lineStr){    if(_lineStr)    {        char* pStr = MALLOC(strlen(_lineStr) + 1, char);        char* pTemp = pStr;                while( '\0' != *_lineStr )        {            if('(' == *_lineStr)            {                *pTemp = ',';            }            else if(')' == *_lineStr)            {                *pTemp = '\0';                break;            }            else            {               *pTemp = *_lineStr;            }                        _lineStr++;            pTemp++;        }                // 调用接口，子类负责执行具体的逻辑        RunScriptFun(pStr);                FREE(pStr);    }}void BaseScript::PraseVar(const char* _lineStr){    if(_lineStr)    {        int len = strlen(_lineStr);        char* pKey = MALLOC(len + 1, char);        char* pValue = MALLOC(len + 1, char);                char* pTempKey = pKey;        char* pTempValue = pValue;                bool isFindDH = false;        // 是否已经找到等号                while( '\0' != *_lineStr )        {            if('=' == *_lineStr)            {                isFindDH = true;                _lineStr ++;                                continue;            }                        if(!isFindDH)            {                *pTempKey = *_lineStr;                pTempKey++;            }            else            {                *pTempValue = *_lineStr;                pTempValue++;            }                        _lineStr++;        }                //printf("PraseVar: %s=%s\n", pKey, pValue);                // 添加到容器中去        SetVar(pKey, pValue);                RunScriptVarSet(pKey,pValue);                FREE(pKey);        FREE(pValue);            }}void BaseScript::PrintData(){#ifdef GAME_DEBUG_MODE    printf("*************************************\n");    printf("BaseScript::PrintData\n");        // 输出脚本文件信息    printf("---------------------------------------\n");    printf("line data:\n");    for(int i=0; i< m_lineData.size(); i++)    {        printf("%d %s\n", i+1, m_lineData[i].c_str());    }                // 遍历地图容器    printf("---------------------------------------\n");    printf("var:\n");    map <string, string>::iterator mapIt;    for(mapIt = m_var.begin(); mapIt != m_var.end(); mapIt++)    {        string key = mapIt->first;        string value = mapIt->second;               printf("%s=%s\n", key.c_str(), value.c_str());    }            printf("*************************************\n");    #endif}