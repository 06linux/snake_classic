#include "Base.h"#include "BaseMusic.h"#include "SimpleAudioEngine.h"using namespace CocosDenshion;static BaseMusic* gBaseMusic = NULL;BaseMusic* BaseMusic::Instance(void){    if(NULL == gBaseMusic)    {        gBaseMusic = new BaseMusic();        gBaseMusic->BaseMusicInit();    }        return gBaseMusic;}void BaseMusic::BaseMusicInit(void){    m_pMusicFileName = NULL;	memset(m_pSoundFileName, 0, sizeof(m_pSoundFileName));	memset(m_SoundPlayId, 0, sizeof(m_SoundPlayId));        m_IsOpenMusic = true;    m_IsOpenSound = true;}void BaseMusic::BaseMusicFree(void){    SimpleAudioEngine::getInstance()->end();		if(m_pMusicFileName)	{		free(m_pMusicFileName);		m_pMusicFileName = NULL;	}		SoundFreeAll();}void BaseMusic::MusciLoad(const char* _fileName){	if(NULL == _fileName) return;		if(m_pMusicFileName)	{		free(m_pMusicFileName);		m_pMusicFileName = NULL;	}		m_pMusicFileName = (char*)malloc((strlen(_fileName)+1));	strcpy(m_pMusicFileName, _fileName);	SimpleAudioEngine::getInstance()->preloadBackgroundMusic(m_pMusicFileName);	}void BaseMusic::MusicPlay(bool _loop){	if(m_pMusicFileName)	{		SimpleAudioEngine::getInstance()->playBackgroundMusic(m_pMusicFileName, _loop);	}}void BaseMusic::MusicStop(){	SimpleAudioEngine::getInstance()->stopBackgroundMusic();}void BaseMusic::MusicPause(){	SimpleAudioEngine::getInstance()->pauseBackgroundMusic();}void BaseMusic::MusicResume(){	SimpleAudioEngine::getInstance()->resumeBackgroundMusic();}void BaseMusic::MusicAddVolume(){	float volume = SimpleAudioEngine::getInstance()->getBackgroundMusicVolume();		if( volume < 1.0 )	{		volume += 0.1;		if(volume > 1.0)		{			volume = 1.0;		}	}	SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(volume);}void BaseMusic::MusicSubVolume(){	float volume = SimpleAudioEngine::getInstance()->getBackgroundMusicVolume();		if( volume > 0 )	{		volume -= 0.1;		if(volume < 0)		{			volume = 0;		}	}	SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(volume);}void BaseMusic::MusicSetVolume(float _volume){	if( _volume >=0 && _volume <=1)	{		SimpleAudioEngine::getInstance()->setBackgroundMusicVolume(_volume);	}}void BaseMusic::SoundLoad(const char* _fileName){	int i = 0;	if( NULL == _fileName ) return ;		SoundFree(_fileName);		for(i=0; i<BaseMusic_MaxSoundNum; i++)	{		if( NULL == m_pSoundFileName[i] )		{			break;		}	}		if(i>=0 && i<BaseMusic_MaxSoundNum)	{		m_pSoundFileName[i] = (char*)malloc((strlen(_fileName)+1));		strcpy(m_pSoundFileName[i], _fileName);		m_SoundPlayId[i] = -1;		SimpleAudioEngine::getInstance()->preloadEffect(m_pSoundFileName[i]);	}	else	{		printf("Warning: BaseMusic::SoundLoad fail!! \n");	}}void BaseMusic::SoundFree(const char* _fileName){	if( NULL == _fileName ) return;		for(int i=0; i<BaseMusic_MaxSoundNum; i++)	{		if( NULL != m_pSoundFileName[i] &&  0 == strcmp( m_pSoundFileName[i], _fileName) )		{			SimpleAudioEngine::getInstance()->unloadEffect(m_pSoundFileName[i]);			free(m_pSoundFileName[i]);			m_pSoundFileName[i] = NULL;			m_SoundPlayId[i] = -1;						break;		}	}}void BaseMusic::SoundPlay(const char* _fileName){	int i= 0;	if( NULL == _fileName ) return ;			for(i=0; i<BaseMusic_MaxSoundNum; i++)	{		if( NULL != m_pSoundFileName[i] &&  0 == strcmp( m_pSoundFileName[i], _fileName) )		{			break;		}	}		if(i>=0 && i<BaseMusic_MaxSoundNum)	{		m_SoundPlayId[i] = SimpleAudioEngine::getInstance()->playEffect(m_pSoundFileName[i]);	}	else	{		printf("Warning: BaseMusic::SoundPlay fail!! \n");	}}void BaseMusic::SoundStop(const char* _fileName){	int i= 0;	if( NULL == _fileName ) return ;		for(i=0; i<BaseMusic_MaxSoundNum; i++)	{		if( NULL != m_pSoundFileName[i] &&  0 == strcmp( m_pSoundFileName[i], _fileName) )		{			break;		}	}		if(i>=0 && i<BaseMusic_MaxSoundNum && m_SoundPlayId[i] >=0)	{		SimpleAudioEngine::getInstance()->stopEffect(m_SoundPlayId[i]);		m_SoundPlayId[i] = -1;	}}void BaseMusic::SoundFreeAll(){	for(int i=0; i<BaseMusic_MaxSoundNum; i++)	{		if( NULL != m_pSoundFileName[i] )		{			SimpleAudioEngine::getInstance()->unloadEffect(m_pSoundFileName[i]);			free(m_pSoundFileName[i]);			m_pSoundFileName[i] = NULL;			m_SoundPlayId[i] = -1;		}	}}//volume must be in 0.0~1.0void BaseMusic::SoundAddVolume(){	float volume = SimpleAudioEngine::getInstance()->getEffectsVolume();		if( volume < 1.0 )	{		volume += 0.1;		if(volume > 1.0)		{			volume = 1.0;		}	}	SimpleAudioEngine::getInstance()->setEffectsVolume(volume);}void BaseMusic::SoundSubVolume(){	float volume = SimpleAudioEngine::getInstance()->getEffectsVolume();		if( volume > 0 )	{		volume -= 0.1;		if(volume < 0)		{			volume = 0;		}	}	SimpleAudioEngine::getInstance()->setEffectsVolume(volume);	}void BaseMusic::SoundSetVolume(float _volume){	if( _volume >=0 && _volume <=1)	{		SimpleAudioEngine::getInstance()->setEffectsVolume(_volume);	}}//  随即播放音乐void BaseMusic::MusicControl(){    MusicStop();        if(m_IsOpenMusic)    {        // 随即加载        switch (arc4random()%3)        {            case 0:            {                MusciLoad(music_Play1);                            }                break;            case 1:            {                MusciLoad(music_Play2);            }                break;            case 2:            {                MusciLoad(music_Play3);            }                break;            default:            {                MusciLoad(music_Play3);            }                break;        }                MusicPlay(true);    }}void BaseMusic::MusicControl(const char* _fileName, bool _isLoop){    MusicStop();        if(m_IsOpenMusic)    {        MusciLoad(_fileName);        MusicPlay(_isLoop);    }}void BaseMusic::SoundControl(const char* _fileName){    if(m_IsOpenSound)    {        SoundPlay(_fileName);    }}