#include "Base.h"#include "CSVFileReader.h"static CSVFileReader* gCSVFileReader = NULL;CSVFileReader::CSVFileReader(){    InitAll();}CSVFileReader::~CSVFileReader(){    FreeAll();}CSVFileReader*  CSVFileReader::Instance(){    if(NULL == gCSVFileReader)    {        gCSVFileReader = new CSVFileReader();    }            return  gCSVFileReader;    }void CSVFileReader::InitAll(){     memset(m_csvData, 0, sizeof(m_csvData));}void CSVFileReader::FreeAll(){    for(int i=CSVTable_Null; i<CSVTable_End; i++)	{		if(m_csvData[i])        {            delete m_csvData[i];            m_csvData[i] = NULL;        }	}}void CSVFileReader::LoadTable(CSVTable _idTable, const char* _csvFileName){    if( _idTable < CSVTable_Null || _idTable >= CSVTable_End ) return;        // 先释放    FreeTable(_idTable);        m_csvData[_idTable] = new CSVParse();    m_csvData[_idTable]->openFile(_csvFileName);}void CSVFileReader::FreeTable(CSVTable _idTable){    if( _idTable < CSVTable_Null || _idTable >= CSVTable_End ) return;        if(m_csvData[_idTable])    {        delete m_csvData[_idTable];        m_csvData[_idTable] = NULL;    }}int CSVFileReader::GetTableRowCount(CSVTable _idTable){    if( _idTable < CSVTable_Null || _idTable >= CSVTable_End ) return 0;        if(m_csvData[_idTable])    {        if( m_csvData[_idTable]->getDataSize() > 1)        {            return  m_csvData[_idTable]->getDataSize() -1;        }        return 0;    }        return 0;}const char* CSVFileReader::GetTableData(CSVTable _idTable, int _idRow, int _idCol){    if( _idTable < CSVTable_Null || _idTable >= CSVTable_End ) return NULL;      if(m_csvData[_idTable])    {        return m_csvData[_idTable]->getData(_idRow, _idCol);    }        return NULL;}int CSVFileReader::GetTableDataInt(CSVTable _idTable, int _idRow, int _idCol){    int ret = 0;    const char* pStr = GetTableData(_idTable, _idRow, _idCol);        if(!BaseUtil::strIsNULL(pStr))    {        ret = BaseUtil::strToInt(pStr);    }        return ret;}float CSVFileReader::GetTableDataFloat(CSVTable _idTable, int _idRow, int _idCol){    float ret = 0;    const char* pStr = GetTableData(_idTable, _idRow, _idCol);        if(!BaseUtil::strIsNULL(pStr))    {        ret = BaseUtil::strToFloat(pStr);    }        return ret;}