#include "MainMenu.h"#include "SceneManage.h"#include "SaveManager.h"Scene* MainMenu::createScene(){    // 'scene' is an autorelease object    auto scene = Scene::create();        // 'layer' is an autorelease object    auto layer = MainMenu::create();    // add layer as a child to scene    scene->addChild(layer);        // return the scene    return scene;}MainMenu::MainMenu(){    setTouchListener(true);    setKeyboardListener();}MainMenu::~MainMenu(){}void MainMenu::onEnter(){    BaseLayer::onEnter();       	InitRes();    //schedule(schedule_selector(MainMenu::Update),GAME_TIME_LEN);  // 开启定时器}void MainMenu::onExit(){    unschedule(schedule_selector(MainMenu::Update));        // 停止定时器	FreeRes();        BaseLayer::onExit();}void MainMenu::InitRes(){    CCLOG("MainMenu::InitRes, Screen Size=(%f,%f).....", SCREEN_W, SCREEN_H);        BaseMusic::Instance()->MusicControl(music_Play1, true);    SaveManager::Instance()->ReadData();        // 背景图片显示    Sprite* objBg = Sprite::create("ui_bg.png");    objBg->setScale(3.0f, 3.0f);    objBg->setPosition(SCREEN_CENTER);    addChild(objBg, MainMenuTag_Background, MainMenuTag_Background);        uiLoad(MainMenuTag_MainMenuCsb, "main_menu.csb", Vec2(SCREEN_W/2, SCREEN_H/2));    setAdViewShow(true);        if(DISP_IP6_PLUS == gDisplayMode)    {        setScale(2.0f);    }    else if(DISP_IP6 == gDisplayMode)    {        setScale(1.2f);    }}void MainMenu::FreeRes(){}bool MainMenu::onTouchBegan(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);    CCLOG("MainMenu::onTouchBegan (%f,%f)", touchPoint.x, touchPoint.y);        // 经典模式    if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_classic"), touchPoint))    {        uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_classic"), "an1");    }    // 无限模式    else if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_challenge"), touchPoint))    {        uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_challenge"), "an1");    }    else if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_help"), touchPoint))    {        uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_help"), "an1");    }    // 更多游戏    else if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_more_game"), touchPoint))    {        // go to more game        toOpenNetworkURL("https://itunes.apple.com/cn/artist/tonyqiang/id482385628");    }            return true;}void MainMenu::onTouchEnded(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);    CCLOG("MainMenu::onTouchEnded (%f,%f)", touchPoint.x, touchPoint.y);        uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_classic"), "an0");    uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_challenge"), "an0");    uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_help"), "an0");    uiPlay(uiGetChild(MainMenuTag_MainMenuCsb, "btn_more_game"), "an0");        // 经典模式    if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_classic"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);        SaveManager::Instance()->m_GameMode = GameMode_Classic;        SceneManage::SWitchToScene(S_GamePlay);    }    // 无限模式    else if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_challenge"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);        SaveManager::Instance()->m_GameMode = GameMode_Challenge;        SceneManage::SWitchToScene(S_LevelSelect);    }    // 游戏帮助    else if(isTouchOnNode(uiGetChild(MainMenuTag_MainMenuCsb, "btn_help"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);        SceneManage::SWitchToScene(S_Help);    }    }void MainMenu::onTouchCancelled(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);            CCLOG("MainMenu::onTouchCancelled (%f,%f)", touchPoint.x, touchPoint.y);}void MainMenu::onTouchMoved(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);        CCLOG("MainMenu::onTouchMoved (%f,%f)", touchPoint.x, touchPoint.y);}void MainMenu::onKeyPressed(EventKeyboard::KeyCode _code, Event* _event){    }void MainMenu::onKeyReleased(EventKeyboard::KeyCode _code, Event* _event){}void  MainMenu::uiLastFrameCallFun(const std::string& _varStr){    CCLOG("MainMenu::uiLastFrameCallFun, %s ", _varStr.c_str());    }void MainMenu::uiFrameEventCallFun(cocostudio::timeline::Frame* _frame, const std::string& _varStr){    cocostudio::timeline::EventFrame* eventFrame = dynamic_cast<cocostudio::timeline::EventFrame*>(_frame);    if(eventFrame)    {        CCLOG("MainMenu::uiFrameEventCallFun, event_name = %s,  varstr=%s ",eventFrame->getEvent().c_str(), _varStr.c_str());    }}void MainMenu::arMovementEventCallFun(Armature *_objAr, MovementEventType _movementType, const std::string& _movementID, const std::string& _varStr){    CCLOG("MainMenu::arMovementEventCallFun, %s ", _varStr.c_str());}void MainMenu::arFrameEventCallFun(cocostudio::Bone *_bone, const std::string& _evt, int _originFrameIndex, int _currentFrameIndex, const std::string& _varStr){    CCLOG("MainMenu::arFrameEventCallFun, %s ", _varStr.c_str());}void MainMenu::actCallFun(Node* _node, int _actTag, const std::string& _varStr){    CCLOG("MainMenu::actCallFun, actTag = %d, %s ",_actTag, _varStr.c_str());}void  MainMenu::Update(float _dt){    CCLOG("MainMenu::Update dt=(%f)", _dt);}