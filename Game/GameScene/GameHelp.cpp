#include "GameHelp.h"#include "SceneManage.h"#include "SaveManager.h"#include "GamePlay.h"Scene* GameHelp::createScene(){    // 'scene' is an autorelease object    auto scene = Scene::create();        // 'layer' is an autorelease object    auto layer = GameHelp::create();    // add layer as a child to scene    scene->addChild(layer);        // return the scene    return scene;}GameHelp::GameHelp(){    setTouchListener(true);    setKeyboardListener();}GameHelp::~GameHelp(){}void GameHelp::onEnter(){    BaseLayer::onEnter();       	InitRes();    //schedule(schedule_selector(GameHelp::Update),GAME_TIME_LEN);  // 开启定时器}void GameHelp::onExit(){    unschedule(schedule_selector(GameHelp::Update));        // 停止定时器	FreeRes();        BaseLayer::onExit();}void GameHelp::InitRes(){    // 背景图片显示    Sprite* objBg = Sprite::create("ui_bg.png");    objBg->setScale(3.0f, 3.0f);    objBg->setPosition(SCREEN_CENTER);    addChild(objBg, GameHelpTag_Background, GameHelpTag_Background);            uiLoad(GameHelpTag_GameHelpCsb, "help_menu.csb", Vec2(SCREEN_W/2, SCREEN_H/2));        setAdViewShow(true);        if(DISP_IP6_PLUS == gDisplayMode)    {        setScale(2.0f);    }    else if(DISP_IP6 == gDisplayMode)    {        setScale(1.2f);    }}void GameHelp::FreeRes(){}bool GameHelp::onTouchBegan(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);    CCLOG("GameHelp::onTouchBegan (%f,%f)", touchPoint.x, touchPoint.y);        // 退出游戏    if(isTouchOnNode(uiGetChild(GameHelpTag_GameHelpCsb, "btn_quit"), touchPoint))    {        uiPlay(uiGetChild(GameHelpTag_GameHelpCsb, "btn_quit"), "an1");    }            return true;}void GameHelp::onTouchEnded(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);    CCLOG("GameHelp::onTouchEnded (%f,%f)", touchPoint.x, touchPoint.y);        uiPlay(uiGetChild(GameHelpTag_GameHelpCsb, "btn_quit"), "an0");        // 返回主界面    if(isTouchOnNode(uiGetChild(GameHelpTag_GameHelpCsb, "btn_quit"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);        SceneManage::SWitchToScene(S_MainMenu);    }    }void GameHelp::onTouchCancelled(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);            CCLOG("GameHelp::onTouchCancelled (%f,%f)", touchPoint.x, touchPoint.y);}void GameHelp::onTouchMoved(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);        CCLOG("GameHelp::onTouchMoved (%f,%f)", touchPoint.x, touchPoint.y);}void GameHelp::onKeyPressed(EventKeyboard::KeyCode _code, Event* _event){    }void GameHelp::onKeyReleased(EventKeyboard::KeyCode _code, Event* _event){}void  GameHelp::uiLastFrameCallFun(const std::string& _varStr){    CCLOG("GameHelp::uiLastFrameCallFun, %s ", _varStr.c_str());    }void GameHelp::uiFrameEventCallFun(cocostudio::timeline::Frame* _frame, const std::string& _varStr){    cocostudio::timeline::EventFrame* eventFrame = dynamic_cast<cocostudio::timeline::EventFrame*>(_frame);    if(eventFrame)    {        CCLOG("GameHelp::uiFrameEventCallFun, event_name = %s,  varstr=%s ",eventFrame->getEvent().c_str(), _varStr.c_str());    }}void GameHelp::arMovementEventCallFun(Armature *_objAr, MovementEventType _movementType, const std::string& _movementID, const std::string& _varStr){    CCLOG("GameHelp::arMovementEventCallFun, %s ", _varStr.c_str());}void GameHelp::arFrameEventCallFun(cocostudio::Bone *_bone, const std::string& _evt, int _originFrameIndex, int _currentFrameIndex, const std::string& _varStr){    CCLOG("GameHelp::arFrameEventCallFun, %s ", _varStr.c_str());}void GameHelp::actCallFun(Node* _node, int _actTag, const std::string& _varStr){    CCLOG("GameHelp::actCallFun, actTag = %d, %s ",_actTag, _varStr.c_str());}void  GameHelp::Update(float _dt){    CCLOG("GameHelp::Update dt=(%f)", _dt);}