/* *  NpcManager.h *  CCGame * *  Created by linux_wuliqiang@163.com on 2015-04-08. *  Copyright 2015 Beijing. All rights reserved. * *	添加到地图上的所有精灵的管理。 *  1>  主角精灵 *  2>  敌人精灵 *  3>  一些特效显示 * * * */#ifndef __NpcManager_H__#define __NpcManager_H__#include "Npc.h"#define NpcManager_MaxIdExcel    4#define MapBuffer_ClearTag 10000            // 可以清除的位置 （当前位置的 npc 可以清除）// 添加到地图上的，所有 对象的 Z 轴排序typedef enum{    MapZOder_Null  = 100,        MapZOder_Npc,    MapZOder_Show,          // 存在遮挡关系的地图物品显示    MapZOder_Bullet,        MapZOder_End,    }MapZOder;class Npc;class NpcManager{    public:        NpcManager();    ~NpcManager();        static NpcManager* Instance(void);    public:        /*     *	加载一个精灵到地图中去     *	_idExcel        excel 表 id     *  _mapPos         地图中的位置     */        Npc*            Load(int _idExcel, Vec2 _mapPos, NpcType _npcType, int _zOder);    Npc*            LoadByMapGrid(int _idExcel, Vec2 _mapGrid, NpcType _npcType, int _zOder);    void            Free(int _idUnique);    void            FreeByMapGrid(Vec2 _mapPos, NpcType _npcType);    void            FreeAll();    Npc*            Get(int _idUnique);    Npc*            GetByMapGrid(Vec2 _mapGrid, NpcType _npcType);    int             GetCount(NpcType _npcType);         // 得到指定类型的 npc 的个数        void            UpdateLogic(float _dt);    bool            TouchPressed(Vec2 _touchPos);        // _touchPos 屏幕触摸位置    bool            TouchReleased(Vec2 _touchPos);            // 地图数据缓冲（判断某个位置是否可以通过， 0：可以通过）    void            MapBuffer_Init(Size _mapSize);          // 初始化    void            MapBuffer_Free();                         // 释放数据    void            MapBuffer_Refresh();                      // 刷新地图宝石类型缓冲数据    int             MapBuffer_Get(Vec2 _mapGrid);          // 得到地图上某个位置的宝石类型    void            MapBuffer_Set(Vec2 _mapGrid, int _type);          // 重新设置地图上某个位置的宝石类型    void            MapBuffer_Clear();     // 清空缓冲    private:        vector<Npc*>            m_vNpc;         // 所有精灵显示    vector<Npc*>            m_vShow;        // 所有地图特效显示 (添加到地图上的一些精灵，用来当做显示效果)--存在遮挡关系    vector<Npc*>            m_vBullet;      // 存储所有的子弹，（需要计算攻击伤害的一些精灵）            int**                   m_pMapBuffer;    // 精灵在地图中的位置缓冲（存储某个地图网格位置上，显示的精灵 idExcel）       public: // 逻辑相关        // 初始化 npc 链表 （初始化蛇头，蛇身）    void            Npc_Init(Vec2 _mapGridHead, int _idExcelHead, int _IdExcelBody, NpcRunDir _headDir, int _bodyLen);    void            Npc_UpdateRun(float _dt); // 更新行走逻辑        Npc*            Npc_GetSnakeHead();    // 得到蛇头对象    void            Npc_SetHeadDir(NpcRunDir _dir);    // 设置行走方向    void            Npc_DoEat(Vec2 _mapGrid);           //  执行吃物品逻辑    void            Npc_CheckDead(Vec2 _mapGrid);       // 检测是否死亡    void            Npc_AddFood();                      // 增加食物    void            Npc_CheckWin();                     // 检测是否胜利        int             Npc_GetCount();    Npc*            Npc_GetByRand();    bool            Npc_InMove();        };		 #endif // __NpcManager_H__