#include "Base.h"#include "SceneManage.h"#include "MainMenu.h"#include "LevelSelect.h"#include "GameHelp.h"#include "GamePlay.h"static SceneId    gSceneCurrent = S_Null;       // 当前场景static SceneId    gSceneOld = S_Null;           // 上一个场景SceneManage::SceneManage(){}SceneManage::~SceneManage(){}// 进入游戏，第一个运行的场景void SceneManage::RunWithScene(){    gSceneCurrent = S_MainMenu;    gSceneOld = S_MainMenu;    	CCDirector::getInstance()->runWithScene(MainMenu::createScene());}// 从当前常景切换到指定的常景void SceneManage::SWitchToScene(SceneId _sceneId, AnId _anId, float _switchTime){	Scene* pScene = NULL;	TransitionScene* pTransitionScene = NULL;		switch(_sceneId)	{		case S_MainMenu:		{			// create a scene. it's an autorelease object			pScene = MainMenu::createScene();		}			break;        case S_LevelSelect:        {            pScene = LevelSelect::createScene();        }            break;        case S_Help:        {            pScene = GameHelp::createScene();        }            break;		case S_GamePlay:		{			pScene = GamePlay::createScene();		}			break;		default:		{			printf("Error: SceneManage::SWitchToScene \n");		}	}				if(NULL != pScene)	{		// 切换动画的设定		switch(_anId)		{			case An_NULL:			{				pTransitionScene = NULL;			}				break;			case An_SlideInL:			{				pTransitionScene = TransitionSlideInL::create(_switchTime, pScene);			}				break;			case An_SlideInR:			{				pTransitionScene = TransitionSlideInR::create(_switchTime, pScene);			}				break;			case An_SlideInT:			{				pTransitionScene = TransitionSlideInT::create(_switchTime, pScene);			}				break;			case An_SlideInB:			{				pTransitionScene = TransitionSlideInB::create(_switchTime, pScene);			}				break;			case An_MoveInL:			{				pTransitionScene = TransitionMoveInL::create(_switchTime, pScene);			}				break;			case An_MoveInR:			{				pTransitionScene = TransitionMoveInR::create(_switchTime, pScene);			}				break;			case An_MoveInT:			{				pTransitionScene = TransitionMoveInT::create(_switchTime, pScene);			}				break;			case An_MoveInB:			{				pTransitionScene = TransitionMoveInB::create(_switchTime, pScene);			}				break;			case An_FlipX:			{				pTransitionScene = TransitionFlipX::create(_switchTime, pScene);			}				break;			case An_FlipY:			{				pTransitionScene = TransitionFlipY::create(_switchTime, pScene);			}				break;			case An_PageForward:			{				pTransitionScene = TransitionPageTurn::create(_switchTime, pScene, false);			}				break;			case An_PageBackward:			{				pTransitionScene = TransitionPageTurn::create(_switchTime, pScene, true);			}				break;				case An_FadeUp:			{				pTransitionScene = TransitionFadeUp::create(_switchTime, pScene);			}				break;			case An_FadeDown:			{				pTransitionScene = TransitionFadeDown::create(_switchTime, pScene);					}				break;			case An_FadeTR:			{				pTransitionScene = TransitionFadeTR::create(_switchTime, pScene);			}				break;			case An_FadeBL:			{				pTransitionScene = TransitionFadeBL::create(_switchTime, pScene);			}				break;			case An_SplitRows:			{				pTransitionScene = TransitionSplitRows::create(_switchTime, pScene);			}				break;			case An_SplitCols:			{				pTransitionScene = TransitionSplitCols::create(_switchTime, pScene);			}				break;			case An_FadeBlack:  // 黑色渐变			{				pTransitionScene = TransitionFade::create(_switchTime, pScene);			}				break;			case An_FadeWhite:  // 白色渐变			{                pTransitionScene = TransitionFade::create(_switchTime, pScene, Color3B::WHITE);			}				break;			default:			{				pTransitionScene = NULL;			}				break;		}	}		if(NULL != pScene)	{		if(NULL != pTransitionScene)		{			CCDirector::getInstance()->replaceScene(pTransitionScene);		}		else		{			CCDirector::getInstance()->replaceScene(pScene);		}                gSceneOld = gSceneCurrent;        gSceneCurrent = _sceneId;	}}SceneId SceneManage::GetSceneIdCurr(){    return gSceneCurrent;}SceneId SceneManage::GetSceneIdOld(){    return gSceneOld;}