/* *  GamePlay.h *  CCGame * *  Created by linux_wuliqiang@163.com on 2015-03-30. *  Copyright 2015 Beijing. All rights reserved. * *	 */#ifndef __GamePlay_H__#define __GamePlay_H__#include "Base.h"#include "Npc.h"// tag 标志位typedef enum{    GamePlayTag_Null = 0,        GamePlayTag_Background,        GamePlayTag_Map,        // 地图对象    GamePlayTag_PlayMenuCsb,        // 游戏界面按钮    GamePlayTag_PauseMenuCsb,       // 暂停界面    GamePlayTag_JieSuanMenuCsb,     // 结算界面        GamePlayTag_End}GamePlayTag;#define MAP_LAYER_TAG   "map_tag"     // 地图 tag layer 的名字#define MAP_LAYER_BG    "map_bg"      // 地图 背景层 的名字// 地图 tag 标志位 （和 map_tag.png 要一一对应）typedef enum{    MapTag_Null = 0,        // 第1行    MapTag_NoPass,  // 禁止通过    MapTag_DirUp,    MapTag_DirRight,    MapTag_DirDown,    MapTag_DirLeft,    MapTag_MB_InitFood,     // 地图上的npc ,地图上初始化的食物 -- 初始化地图就会显示    MapTag_DB_DTFood,       // 动态加载的npc , 在游戏运行过程中，动态加载    MapTag_SnakeHead,       // 蛇头        // 第2行 （传送点）    MapTag_ChuanSong_A1,    MapTag_ChuanSong_A2,    MapTag_ChuanSong_A3,    MapTag_ChuanSong_A4,    MapTag_ChuanSong_A5,    MapTag_ChuanSong_A6,    MapTag_ChuanSong_A7,    MapTag_ChuanSong_A8,        // 第3行 （传送点）    MapTag_ChuanSong_B1,    MapTag_ChuanSong_B2,    MapTag_ChuanSong_B3,    MapTag_ChuanSong_B4,    MapTag_ChuanSong_B5,    MapTag_ChuanSong_B6,    MapTag_ChuanSong_B7,    MapTag_ChuanSong_B8,             MapTag_End}MapTag;#define Map_ChuanSong_Max  8        // 地图最多支持的传送点个数class GamePlay : public BaseLayer{public:        CREATE_FUNC(GamePlay);        static GamePlay* Instance(void);    	GamePlay();	virtual ~GamePlay();		virtual void    onEnter();	virtual void    onExit();		static Scene*   createScene();        virtual bool    onTouchBegan(Touch* _touch, Event* _event);                        // 触摸按下(回调函数)    virtual void    onTouchEnded(Touch* _touch, Event* _event);                        // 触摸抬起(回调函数)    virtual void    onTouchCancelled(Touch* _touch, Event* _event);                    // 触摸取消(回调函数)    virtual void    onTouchMoved(Touch* _touch, Event* _event);                        // 触摸移动(回调函数)	    virtual void    onKeyPressed(EventKeyboard::KeyCode _code, Event* _event);          // (回调函数)    virtual void    onKeyReleased(EventKeyboard::KeyCode _code, Event* _event);         // (回调函数)        virtual void    uiLastFrameCallFun(const std::string& _varStr);                                             // ui 动画播放到最后一帧回调此函数 _varStr,可以通过此参数传递一些需要的数据    virtual void    uiFrameEventCallFun(cocostudio::timeline::Frame* _frame, const std::string& _varStr);       // ui 动画事件帧回调此函数        virtual void    arMovementEventCallFun(Armature *_objAr, MovementEventType _movementType, const std::string& _movementID, const std::string& _varStr);       // 动画播放事件--动画开始播放，动画播放结束时回调    virtual void    arFrameEventCallFun(cocostudio::Bone *_bone, const std::string& _evt, int _originFrameIndex, int _currentFrameIndex, const std::string& _varStr);  // 动画帧事件    private:		void            InitRes();	void            FreeRes();    void            Update(float _dt);            NpcRunDir           GetTouchDir(Vec2 _touchBegan, Vec2 _touchEnd);      // 的到触摸的方向    private:    Vec2                m_touchBeganPos;    // 触摸开始的位置    NpcRunDir           m_touchDir;         // 触摸手势的方向        bool                m_isPauseMenuShow;      // 游戏是否暂停    bool                m_isJieSuanMenuShow;    // 游戏是否结束    public:  // 游戏逻辑相关变量            BaseTiledMap*               m_Map;    extension::ScrollView*      m_MapView;                      // 用来实现地图剪裁显示    vector<Vec2>                m_MapCreateNpcGrid;             // 地图上的动态出兵点    Vec2                        m_MapChuanSong_A[Map_ChuanSong_Max];        // 记录地图传送点的坐标    Vec2                        m_MapChuanSong_B[Map_ChuanSong_Max];        public: // 游戏逻辑相关函数            // 地图模块    void            Map_Init();    void            Map_Free();    void            Map_Restart();                              // 重新开始游戏    void            Map_Update(float _dt);    NpcRunDir       Map_GetTagDir(Vec2 _mapGrid);               // 得到地图 tag 层，方向设置数据    void            Map_UpdateShowPos(Vec2 _showPos, Size _showSize);       // 更新地图的现实大小和位置 （自动缩放到适应的大小）    void            Map_AddScore(int _addScore);     // 增加分数-- 吃掉地图上物品是，增加分数    void            Map_ClearScore();     // 清除当前关卡得分            void            Map_InitNpc();                              // 初始化地图上的对象显示    void            Map_ChuanSongInit();                        // 初始化地图上的所有传送点坐标    Vec2            Map_GetChanSongMapGrid(Vec2 _mapGrid);      // 得到传送的目标点网格坐标 （如果不存在传送，返回 （-1,-1））        void            Map_CreateNpcAdd(Vec2 _mapGrid);            // 增加一个出兵位置    void            Map_CreateNpcDel(Vec2 _mapGrid);            // 删除一个出兵点    Vec2            Map_CreateNpcGet();                         // 随机得到一个出兵点位置    int             Map_CreateNpcGetCount();                    // 得到出兵点位置的个数        // NPC模块    void            Npc_Init();    void            Npc_Update(float _dt);    void            Npc_Free();        // ui 游戏中菜单    void            UI_PlayInit();    void            UI_PlayScoreSet(int _socre, int _scoreMax);        // ui 暂停界面    void            UI_PauseMenuSet(bool _isShow);    bool            UI_PauseMenuDoTouch(Vec2 _touchPos, bool _isTouchEnd);        // ui 结算界面    void            UI_JieSuanMenuSet(bool _isShow);    bool            UI_JieSuanMenuDoTouch(Vec2 _touchPos, bool _isTouchEnd);                            };#endif // __GamePlay_H__