#include "Base.h"#include "Npc.h"#include "NpcManager.h"#include "GamePlay.h"static int gUniqueId = 0;Npc::Npc(){    gUniqueId++;    m_IdUnique = gUniqueId;        m_IdExcel = 0;    m_NpcState = NpcState_Null;    m_MoveToGrid = Vec2(-100,-100);    m_LogicGrid = Vec2(-100,-100);        m_RunDir = NpcRunDir_Null;    m_Next = nullptr;        m_StopMove = 0;}Npc::~Npc(){    }void Npc::actCallFun(Node* _node, int _actTag, const std::string& _varStr){        switch (_actTag)    {        case NpcActionId_MoveToMapGrid:        {            m_LogicGrid = m_MoveToGrid;            m_MoveToGrid = Vec2(-100,-100);                        // 传送点判定逻辑            Vec2 chuanSongGrid = GamePlay::Instance()->Map_GetChanSongMapGrid(GetMapGrid());            if(!BaseUtil::posEqual(chuanSongGrid, Vec2(-100, -100)))            {                SetMapGrid(chuanSongGrid);                //setScale(0.2);                //actScale(this, 0.2, 1.0f);            }            else            {                // 移出地图判定                Vec2 mapGrid = GetMapGrid();                if(mapGrid.x < 0)                {                    mapGrid.x = GamePlay::Instance()->m_Map->m_mapSize.width;                }                else if(mapGrid.x >= GamePlay::Instance()->m_Map->m_mapSize.width)                {                    mapGrid.x = -1;                }                                if(mapGrid.y < 0)                {                    mapGrid.y = GamePlay::Instance()->m_Map->m_mapSize.height;                }                else if(mapGrid.y >= GamePlay::Instance()->m_Map->m_mapSize.height)                {                    mapGrid.y = -1;                }                                SetMapGrid(mapGrid);                                // 地图外部移动，对蛇头方向进行修正                if(NpcType_Npc_SnakeHead == m_NpcType)                {                    if(mapGrid.x <0)                    {                        m_RunDir = NpcRunDir_Right;   // 只能向右                    }                    else if(mapGrid.x >= GamePlay::Instance()->m_Map->m_mapSize.width)                    {                        m_RunDir = NpcRunDir_Left;                    }                                        if(mapGrid.y < 0)                    {                        m_RunDir = NpcRunDir_Down;                    }                    else if(mapGrid.y >= GamePlay::Instance()->m_Map->m_mapSize.height)                    {                        m_RunDir = NpcRunDir_Up;                    }                }            }                   }            break;        default:            break;    }}void Npc::LoadNpc(int _idExcel){    m_IdExcel = _idExcel;        if(_idExcel > 0)    {        // 初始化动画显示        const char* pCsbName = CSVFileReader::Instance()->GetTableData(CSVTable_Npc, _idExcel, TB_Npc_CsbName);        const char* pAnName = CSVFileReader::Instance()->GetTableData(CSVTable_Npc, _idExcel, TB_Npc_AnName);                uiLoad(NpcTag_AnShow, pCsbName, Vec2(0, 0));        if(!BaseUtil::strIsNULL(pAnName))        {            uiPlay(uiGet(NpcTag_AnShow), pAnName);        }                m_NpcType = (NpcType)CSVFileReader::Instance()->GetTableDataInt(CSVTable_Npc, _idExcel, TB_Npc_Type);        m_NpcState = NpcState_Zhan;    }}void Npc::FreeNpc(){    // do nothing}int Npc::UpdateLogic(float _dt){    // do nothing     return 0;}int Npc::UpdatePaint(float _dt){    return 0;}void Npc::ToStatus(NpcState _newStatus){    // do nothing ...}void Npc::SetSelect(bool _isSelect){//    m_IsSelect =_isSelect;//    //    CCSprite* sprIcon = dynamic_cast<CCSprite*>( getChildByTag(NpcTag_Icon));//    if(sprIcon)//    {//        if(_isSelect)//        {//            //sprIcon->setScale(0.5f);//            BaseUtil::RunAction_FadeInOutLoop(sprIcon, 1.0f, ActId_Null, NULL);//        }//        else//        {//            //sprIcon->setScale(1.0f);//            sprIcon->setOpacity(255);//            sprIcon->stopAllActions();//        }//    }}Vec2 Npc::GetMapGrid(){    Vec2 retMapGrid = Vec2(-1, -1);        if(GamePlay::Instance()->m_Map)    {        if(getParent() == GamePlay::Instance()->m_Map) // 确保加载地图上面        {            retMapGrid = GamePlay::Instance()->m_Map->PointSwitch_Pos2MapGrid(getPosition());        }    }        return retMapGrid;}void Npc::SetMapGrid(Vec2 _mapGrid){    Vec2 mapPos = GamePlay::Instance()->m_Map->PointSwitch_MapGrid2Pos(_mapGrid);    setPosition(mapPos);}Vec2 Npc::GetLogicGrid(){    if(BaseUtil::posEqual(m_LogicGrid, Vec2(-100, -100)))    {        return GetMapGrid();    }        return m_LogicGrid;}void Npc::MoveToMapGrid(Vec2 _mapGrid, float _moveTime){    if(GamePlay::Instance()->m_Map)    {        if(_moveTime <=0)        {            _moveTime = 0.5f;        }                m_MoveToGrid = _mapGrid;                Vec2 mapPos = GamePlay::Instance()->m_Map->PointSwitch_MapGrid2Pos(m_MoveToGrid);        setPosition(mapPos);                actDelayTime(this, _moveTime, NpcActionId_MoveToMapGrid, "Npc_MoveToMapGrid");                //Vec2 mapPos = GamePlay::Instance()->m_Map->PointSwitch_MapGrid2Pos(_mapGrid);        //actMoveTo(this, _moveTime, mapPos, NpcActionId_MoveToMapGrid, "Npc_MoveToMapGrid");    }}bool Npc::IsInMove(){    if(BaseUtil::posEqual(m_MoveToGrid, Vec2(-100, -100)))    {        return false;    }    return true;}