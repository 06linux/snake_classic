#include "GamePlay.h"#include "SceneManage.h"#include "NpcManager.h"#include "SaveManager.h"Scene* GamePlay::createScene(){    // 'scene' is an autorelease object    auto scene = Scene::create();        // 'layer' is an autorelease object    auto layer = GamePlay::create();    // add layer as a child to scene    scene->addChild(layer);        // return the scene    return scene;}static GamePlay* gGamePlay = NULL;GamePlay* GamePlay::Instance(void){    return gGamePlay;}GamePlay::GamePlay(){    setTouchListener(true);    setKeyboardListener();        gGamePlay = this;        m_touchBeganPos = Vec2(0, 0);    m_touchDir = NpcRunDir_Null;    m_isPauseMenuShow = false;    m_isJieSuanMenuShow = false;        m_Map = nullptr;    m_MapView = nullptr;    memset(m_MapChuanSong_A, 0, sizeof(m_MapChuanSong_A));    memset(m_MapChuanSong_B, 0, sizeof(m_MapChuanSong_B));    }GamePlay::~GamePlay(){}void GamePlay::onEnter(){    BaseLayer::onEnter();           InitRes();    schedule(schedule_selector(GamePlay::Update),GAME_TIME_LEN);  // 开启定时器}void GamePlay::onExit(){    unschedule(schedule_selector(GamePlay::Update));        // 停止定时器	FreeRes();        BaseLayer::onExit();}void GamePlay::InitRes(){    CCLOG("GamePlay::InitRes, Screen Size=(%f,%f).....", SCREEN_W, SCREEN_H);    //    auto label = Label::createWithTTF("GamePlay", "fonts/Marker Felt.ttf", 32);//    label->setPosition(Vec2(SCREEN_W/2, SCREEN_H-60));//    this->addChild(label, 9999,9999);        Sprite* objBg = Sprite::create("ui_bg.png");    objBg->setScale(3.0f, 3.0f);    objBg->setPosition(SCREEN_CENTER);    addChild(objBg, GamePlayTag_Background, GamePlayTag_Background);        UI_PlayInit();    Map_Init();    Npc_Init();        if(DISP_IP5 == gDisplayMode || DISP_IP6_PLUS == gDisplayMode || DISP_IP6 == gDisplayMode)    {        setAdViewShow(true);    }    else    {        setAdViewShow(false);    }        if(DISP_IP6_PLUS == gDisplayMode)    {        setScale(2.0f);    }    else if(DISP_IP6 == gDisplayMode)    {        setScale(1.2f);    }            BaseMusic::Instance()->MusicControl();    }void GamePlay::FreeRes(){    Npc_Free();    Map_Free();}bool GamePlay::onTouchBegan(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);        CCLOG("GamePlay::onTouchBegan (%f,%f)", touchPoint.x, touchPoint.y);        m_touchBeganPos = touchPoint;        if(m_isPauseMenuShow)    {        UI_PauseMenuDoTouch(touchPoint, false);        return true;    }        if(m_isJieSuanMenuShow)    {        UI_JieSuanMenuDoTouch(touchPoint, false);        return true;    }        if(isTouchOnNode(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_menu"), touchPoint))    {        uiPlay(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_menu"), "an1");    }        return true;}void GamePlay::onTouchEnded(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);        CCLOG("GamePlay::onTouchEnded (%f,%f)", touchPoint.x, touchPoint.y);            if(m_isPauseMenuShow)    {        UI_PauseMenuDoTouch(touchPoint, true);        return;    }        if(m_isJieSuanMenuShow)    {        UI_JieSuanMenuDoTouch(touchPoint, true);        return;    }        // 恢复按钮的状态    uiPlay(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_menu"), "an0");        if(isTouchOnNode(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_menu"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);        UI_PauseMenuSet(true);    }    else if(isTouchOnNode(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_music_set"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);                BaseMusic::Instance()->m_IsOpenMusic = !BaseMusic::Instance()->m_IsOpenMusic;        BaseMusic::Instance()->m_IsOpenSound = BaseMusic::Instance()->m_IsOpenMusic;        BaseMusic::Instance()->MusicControl();                if(BaseMusic::Instance()->m_IsOpenMusic)        {            uiPlay(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_music_set"), "an0");        }        else        {            uiPlay(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_music_set"), "an1");        }    }    else   // 游戏区域触摸逻辑    {                m_touchDir = GetTouchDir(m_touchBeganPos, touchPoint);        CCLOG("GamePlay::onTouchEnded, m_touchDir = %d", m_touchDir);                if( nullptr == m_Map )        {            return ;        }        Vec2 mapGrid = m_Map->PointSwitch_Screen2MapGrid(touchPoint);        CCLOG("GamePlay::onTouchEnded mapGrid=(%f,%f), clipId = %d", mapGrid.x, mapGrid.y, m_Map->GetTileGID(MAP_LAYER_TAG, mapGrid));                BaseMusic::Instance()->SoundControl(sound_TouchPressed);        NpcManager::Instance()->Npc_SetHeadDir(m_touchDir);  // 更新行走方向            }}void GamePlay::onTouchCancelled(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);            CCLOG("GamePlay::onTouchCancelled (%f,%f)", touchPoint.x, touchPoint.y);}void GamePlay::onTouchMoved(Touch *_touch, Event * _event){//    Vec2 touchPoint = getTouch(_touch, _event);//    CCLOG("GamePlay::onTouchMoved (%f,%f)", touchPoint.x, touchPoint.y);}void GamePlay::onKeyPressed(EventKeyboard::KeyCode _code, Event* _event){    }void GamePlay::onKeyReleased(EventKeyboard::KeyCode _code, Event* _event){    }void  GamePlay::Update(float _dt){    //CCLOG("GamePlay::Update dt=(%f)", _dt);        if(m_isPauseMenuShow || m_isJieSuanMenuShow)    {        return;    }        Map_Update(_dt);    Npc_Update(_dt);    }void  GamePlay::uiLastFrameCallFun(const std::string& _varStr){    CCLOG("GamePlay::uiLastFrameCallFun, %s ", _varStr.c_str());    }void GamePlay::uiFrameEventCallFun(cocostudio::timeline::Frame* _frame, const std::string& _varStr){    cocostudio::timeline::EventFrame* eventFrame = dynamic_cast<cocostudio::timeline::EventFrame*>(_frame);    if(eventFrame)    {        CCLOG("GamePlay::uiFrameEventCallFun, event_name = %s,  varstr=%s ",eventFrame->getEvent().c_str(), _varStr.c_str());    }}void GamePlay::arMovementEventCallFun(Armature *_objAr, MovementEventType _movementType, const std::string& _movementID, const std::string& _varStr){     CCLOG("GamePlay::arMovementEventCallFun, %s ", _varStr.c_str());}void GamePlay::arFrameEventCallFun(cocostudio::Bone *_bone, const std::string& _evt, int _originFrameIndex, int _currentFrameIndex, const std::string& _varStr){     CCLOG("GamePlay::arFrameEventCallFun, %s ", _varStr.c_str());}NpcRunDir GamePlay::GetTouchDir(Vec2 _touchBegan, Vec2 _touchEnd){    NpcRunDir retDir = NpcRunDir_Null;        // 判断触摸的方向    if(BaseUtil::mathAbs(_touchEnd.x - _touchBegan.x) > BaseUtil::mathAbs(_touchEnd.y - _touchBegan.y))    {        // 左右滑动        if(BaseUtil::mathAbs(_touchEnd.x - _touchBegan.x) > 20)        {            if(_touchEnd.x > _touchBegan.x)            {                retDir = NpcRunDir_Right;            }            else            {                retDir = NpcRunDir_Left;            }        }    }    else    {        // 上下滑动        if(BaseUtil::mathAbs(_touchEnd.y - _touchBegan.y) > 20)        {            if(_touchEnd.y > m_touchBeganPos.y)            {                retDir = NpcRunDir_Up;            }            else            {                retDir = NpcRunDir_Down;            }        }    }        return retDir;}#pragma mark -#pragma mark Map// 地图模块void GamePlay::Map_Init(){    Map_Free();  // 先释放            if(SaveManager::Instance()->m_GameMode == GameMode_Classic)    {        if(DISP_IP5 == gDisplayMode)        {            m_Map = BaseTiledMap::create("map_classic_ip5.tmx");        }        else if(DISP_IPAD == gDisplayMode)        {            m_Map = BaseTiledMap::create("map_classic.tmx");        }        else  // iphone4s        {            m_Map = BaseTiledMap::create("map_classic.tmx");        }    }    else    {        int levelId = SaveManager::Instance()->m_MapLevelId;        const char* pMapName = CSVFileReader::Instance()->GetTableData(CSVTable_MapLevel, levelId, TB_MapLevel_MapName);                char bufMapName[128] = "";//        if(DISP_IP5 == gDisplayMode)//        {//            sprintf(bufMapName, "%s_ip5.tmx",pMapName);//        }//        else if(DISP_IPAD == gDisplayMode)//        {//            sprintf(bufMapName, "%s_ipad.tmx",pMapName);//        }//        else  // iphone4s        {            sprintf(bufMapName, "%s.tmx",pMapName);        }                m_Map = BaseTiledMap::create(bufMapName);    }        Rect mapShowRect = Rect(0,                            0,                            m_Map->m_mapSize.width*m_Map->m_mapTileSize.width,                            m_Map->m_mapSize.height*m_Map->m_mapTileSize.height);        // 现实地图剪裁显示    m_MapView = ScrollView::create();    m_MapView->setTouchEnabled(false);    m_MapView->setViewSize(mapShowRect.size);       // 设置剪裁区域    m_MapView->setAnchorPoint(Vec2(0, 0));    m_MapView->setContentSize(mapShowRect.size);    m_MapView->addChild(m_Map, 1, 1);    addChild(m_MapView, GamePlayTag_Map, GamePlayTag_Map);            TMXLayer* tagLayer = m_Map->getLayer(MAP_LAYER_TAG);    if(tagLayer)    {        tagLayer->setVisible(false);    }        TMXLayer* bgLayer = m_Map->getLayer(MAP_LAYER_BG);    if(bgLayer)    {        bgLayer->setVisible(true);    }        // 更新地图位置    if(DISP_IP5 == gDisplayMode)    {        m_MapView->setPosition(Vec2(0, 32*3));    }    else if(DISP_IPAD == gDisplayMode)    {        m_MapView->setPosition(Vec2(32*2, 32*1));    }    else if(DISP_IP6_PLUS == gDisplayMode)    {        m_MapView->setPosition(Vec2(32*10, 32*20));        m_MapView->setScale(0.95);    }    else if(DISP_IP6 == gDisplayMode)    {        m_MapView->setPosition(Vec2(32*2, 32*6));        m_MapView->setScale(0.975);    }    else  // iphone4s    {        m_MapView->setPosition(Vec2(0, 0));    }            Map_ClearScore();    Map_ChuanSongInit();    Map_InitNpc();        #ifdef GAME_DEBUG_MODE    //    m_MapView->setPosition(Vec2(0,7));//    m_MapView->setScale(0.5);    #endif    }void GamePlay::Map_Free(){    removeChildByTag(GamePlayTag_Map);    m_Map = nullptr;    m_MapView = nullptr;}void GamePlay::Map_Update(float _dt){    }void GamePlay::Map_Restart(){    Map_ClearScore();    NpcManager::Instance()->FreeAll();    Map_InitNpc();}void GamePlay::Map_AddScore(int _addScore){    if(SaveManager::Instance()->m_GameMode == GameMode_Classic)    {        SaveManager::Instance()->m_ScoreCurr[0] += _addScore;        if(SaveManager::Instance()->m_ScoreCurr[0] > SaveManager::Instance()->m_ScoreMax[0])        {            SaveManager::Instance()->m_ScoreMax[0] = SaveManager::Instance()->m_ScoreCurr[0];        }                UI_PlayScoreSet(SaveManager::Instance()->m_ScoreCurr[0], SaveManager::Instance()->m_ScoreMax[0]);    }    else    {        int mapLevelId = SaveManager::Instance()->m_MapLevelId;        if(mapLevelId >= 0 && mapLevelId < SaveManager_MaxLeve )        {              SaveManager::Instance()->m_ScoreCurr[mapLevelId] += _addScore;              if(SaveManager::Instance()->m_ScoreCurr[mapLevelId] > SaveManager::Instance()->m_ScoreMax[mapLevelId])              {                  SaveManager::Instance()->m_ScoreMax[mapLevelId] = SaveManager::Instance()->m_ScoreCurr[mapLevelId];              }                        UI_PlayScoreSet(SaveManager::Instance()->m_ScoreCurr[mapLevelId], SaveManager::Instance()->m_ScoreMax[mapLevelId]);        }    }    }void GamePlay::Map_ClearScore(){    if(SaveManager::Instance()->m_GameMode == GameMode_Classic)    {        SaveManager::Instance()->m_ScoreCurr[0] = 0;        UI_PlayScoreSet(SaveManager::Instance()->m_ScoreCurr[0], SaveManager::Instance()->m_ScoreMax[0]);    }    else    {        int mapLevelId = SaveManager::Instance()->m_MapLevelId;        if(mapLevelId >= 0 && mapLevelId < SaveManager_MaxLeve )        {            SaveManager::Instance()->m_ScoreCurr[mapLevelId] = 0;            UI_PlayScoreSet(SaveManager::Instance()->m_ScoreCurr[mapLevelId], SaveManager::Instance()->m_ScoreMax[mapLevelId]);        }    }        SaveManager::Instance()->WriteData();}// 将地图显示在 _showSize 大小空间内， 使用 _showPos 作为地图显示的中心点void GamePlay::Map_UpdateShowPos(Vec2 _showPos, Size _showSize){    if(m_MapView && m_Map)    {        Size mapSize = m_Map->m_mapSize;        Size mapTitleSize = m_Map->m_mapTileSize;        float mapWidth = mapSize.width*mapTitleSize.width;        float mapHeight = mapSize.height*mapTitleSize.height;                Vec2 mapScale =  m_Map->GetScale(_showSize);                Vec2 mapPos = Vec2(_showPos.x - mapWidth*mapScale.x/2.0f,_showPos.y - mapHeight*mapScale.y/2.0f);                m_MapView->setScale(mapScale.x);        m_MapView->setPosition(mapPos);                CCLOG("Map_UpdateShowPos: scale = %f, pos(%f,%f)", mapScale.x, mapPos.x, mapPos.y);    }}void GamePlay::Map_InitNpc(){    // 初始化地图上的对象    for (int x=0; x< m_Map->m_mapSize.width; x++)    {        for (int y=0; y< m_Map->m_mapSize.height; y++)        {            Vec2 mapGrid = Vec2(x, y);            int clipId = m_Map->GetTileGID(MAP_LAYER_TAG, mapGrid);            switch (clipId)            {                case MapTag_NoPass:                {                    // 障碍物                    NpcManager::Instance()->LoadByMapGrid(4, mapGrid, NpcType_Bullet_Start, MapZOder_Bullet);                }                    break;                case MapTag_MB_InitFood:  // 初始化地图上的 npc (食物)                {                    // 食物                    NpcManager::Instance()->LoadByMapGrid(3, mapGrid, NpcType_Bullet_Start, MapZOder_Bullet);                }                    break;                case MapTag_SnakeHead:                {                    // 蛇头初始化永远向上                    NpcManager::Instance()->Npc_Init(mapGrid, 1, 2, NpcRunDir_Up, 3);                }                    break;                case MapTag_DB_DTFood:  // 动态出兵点                {                    Map_CreateNpcAdd(mapGrid);                }                    break;                case MapTag_ChuanSong_A1:   // 传送点                case MapTag_ChuanSong_A2:                case MapTag_ChuanSong_A3:                case MapTag_ChuanSong_A4:                case MapTag_ChuanSong_A5:                case MapTag_ChuanSong_A6:                case MapTag_ChuanSong_A7:                case MapTag_ChuanSong_A8:                case MapTag_ChuanSong_B1:                case MapTag_ChuanSong_B2:                case MapTag_ChuanSong_B3:                case MapTag_ChuanSong_B4:                case MapTag_ChuanSong_B5:                case MapTag_ChuanSong_B6:                case MapTag_ChuanSong_B7:                case MapTag_ChuanSong_B8:                {                    // 传送点                    NpcManager::Instance()->LoadByMapGrid(5, mapGrid, NpcType_Show_Start, MapZOder_Show);                }                    break;                                    default:                    break;            }        }    }}NpcRunDir GamePlay::Map_GetTagDir(Vec2 _mapGrid){    NpcRunDir retDir = NpcRunDir_Null;        // 地图上的改变方向的标志位设置    int mapClipId = m_Map->GetTileGID(MAP_LAYER_TAG, _mapGrid);    switch (mapClipId)    {        case MapTag_DirUp:        {            retDir = NpcRunDir_Up;        }            break;        case MapTag_DirRight:        {            retDir = NpcRunDir_Right;        }            break;        case MapTag_DirLeft:        {            retDir = NpcRunDir_Left;        }            break;        case MapTag_DirDown:        {            retDir = NpcRunDir_Down;        }            break;        default:            break;    }        return retDir;}void GamePlay::Map_ChuanSongInit(){    memset(m_MapChuanSong_A, 0, sizeof(m_MapChuanSong_A));    memset(m_MapChuanSong_B, 0, sizeof(m_MapChuanSong_B));        for (int x=0; x< m_Map->m_mapSize.width; x++)    {        for (int y=0; y< m_Map->m_mapSize.height; y++)        {            Vec2 mapGrid = Vec2(x, y);            int clipId = m_Map->GetTileGID(MAP_LAYER_TAG, mapGrid);            if(clipId >= MapTag_ChuanSong_A1 && clipId <= MapTag_ChuanSong_A8)            {                m_MapChuanSong_A[clipId - MapTag_ChuanSong_A1] = mapGrid;      // 记录当前传送点坐标            }                        if(clipId >= MapTag_ChuanSong_B1 && clipId <= MapTag_ChuanSong_B8)            {                m_MapChuanSong_B[clipId - MapTag_ChuanSong_B1] = mapGrid;            }        }    }}Vec2 GamePlay::Map_GetChanSongMapGrid(Vec2 _mapGrid){    int clipId = m_Map->GetTileGID(MAP_LAYER_TAG, _mapGrid);        if(clipId >= MapTag_ChuanSong_A1 && clipId <= MapTag_ChuanSong_A8)    {        return m_MapChuanSong_B[clipId - MapTag_ChuanSong_A1];    }        if(clipId >= MapTag_ChuanSong_B1 && clipId <= MapTag_ChuanSong_B8)    {        return m_MapChuanSong_A[clipId - MapTag_ChuanSong_B1];    }        return Vec2(-100, -100);}void GamePlay::Map_CreateNpcAdd(Vec2 _mapGrid){    m_MapCreateNpcGrid.push_back(_mapGrid);}void GamePlay::Map_CreateNpcDel(Vec2 _mapGrid){    if(m_MapCreateNpcGrid.size() > 0)    {        for(vector<Vec2>::iterator it = m_MapCreateNpcGrid.begin(); it != m_MapCreateNpcGrid.end(); it++)        {            Vec2 mapGrid = *it;                        if(mapGrid == _mapGrid)            {                it = m_MapCreateNpcGrid.erase(it);  // 删除后，必须重新设置 it 的值                break;            }        }            }}Vec2 GamePlay::Map_CreateNpcGet(){    if(m_MapCreateNpcGrid.size() > 0)    {        int randIndex = BaseUtil::randNum2(1, m_MapCreateNpcGrid.size(), 0);        Vec2 randGrid = m_MapCreateNpcGrid.at(randIndex-1);                return randGrid;    }        return Vec2(-100,-100);}int GamePlay::Map_CreateNpcGetCount(){    return (int)m_MapCreateNpcGrid.size();}#pragma mark -#pragma mark Npc// NPC模块void GamePlay::Npc_Init(){    // test code ..    //NpcManager::Instance()->LoadByMapGrid(3, Vec2(2,2), NpcType_Bullet_Start, MapZOder_Bullet);}void GamePlay::Npc_Update(float _dt){    NpcManager::Instance()->UpdateLogic(_dt);}void GamePlay::Npc_Free(){    NpcManager::Instance()->FreeAll();}#pragma mark -#pragma mark UIvoid GamePlay::UI_PlayInit(){    if(DISP_IP5 == gDisplayMode)    {        uiLoad(GamePlayTag_PlayMenuCsb, "ui_play_menu.csb", Vec2(SCREEN_W/2, SCREEN_H/2+64));    }    else if(DISP_IPAD == gDisplayMode)    {        uiLoad(GamePlayTag_PlayMenuCsb, "ui_play_menu.csb", Vec2(SCREEN_W/2, SCREEN_H/2));    }    else  // iphone4s    {        uiLoad(GamePlayTag_PlayMenuCsb, "ui_play_menu.csb", Vec2(SCREEN_W/2, SCREEN_H/2));    }            if(BaseMusic::Instance()->m_IsOpenMusic)    {        uiPlay(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_music_set"), "an0");    }    else    {        uiPlay(uiGetChild(GamePlayTag_PlayMenuCsb, "btn_music_set"), "an1");    }            if(SaveManager::Instance()->m_GameMode == GameMode_Classic)    {        UI_PlayScoreSet(SaveManager::Instance()->m_ScoreCurr[0], SaveManager::Instance()->m_ScoreMax[0]);    }    else    {        int mapLevelId = SaveManager::Instance()->m_MapLevelId;        if(mapLevelId >= 0 && mapLevelId < SaveManager_MaxLeve )        {            UI_PlayScoreSet(SaveManager::Instance()->m_ScoreCurr[mapLevelId], SaveManager::Instance()->m_ScoreMax[mapLevelId]);        }        else        {            UI_PlayScoreSet(1, 2);        }    }}void GamePlay::UI_PlayScoreSet(int _socre, int _scoreMax){    cocos2d::ui::Text* txtScore = dynamic_cast<cocos2d::ui::Text*>(uiGetChild(GamePlayTag_PlayMenuCsb, "txt_score"));    if(txtScore)    {        char bufNum[64] = "";        sprintf(bufNum, "%d", _socre);        txtScore->setString(bufNum);    }        cocos2d:ui::Text* txtScoreMax = dynamic_cast<cocos2d::ui::Text*>(uiGetChild(GamePlayTag_PlayMenuCsb, "txt_score_max"));    if(txtScoreMax)    {        char bufNum[64] = "";        sprintf(bufNum, "%d", _scoreMax);        txtScoreMax->setString(bufNum);    }}void GamePlay::UI_PauseMenuSet(bool _isShow){    m_isPauseMenuShow = _isShow;        // 广告现实逻辑    if(_isShow)    {        setAdViewShow(true);    }    else    {        if(DISP_IP5 == gDisplayMode || DISP_IP6_PLUS == gDisplayMode || DISP_IP6 == gDisplayMode)        {            setAdViewShow(true);        }        else        {            setAdViewShow(false);        }    }        if(_isShow)    {        uiLoad(GamePlayTag_PauseMenuCsb, "ui_pause_menu.csb", SCREEN_CENTER);                // 背景图片缩放，保证全屏显示        Node* objBg = uiGetChild(GamePlayTag_PauseMenuCsb, "ui_bg");        if(objBg)        {            objBg->setScale(3.0f, 3.0f);        }                        if(BaseMusic::Instance()->m_IsOpenMusic)        {            uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_music_set"), "an0");        }        else        {            uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_music_set"), "an1");        }    }    else    {        uiFree(GamePlayTag_PauseMenuCsb);    }    }bool GamePlay::UI_PauseMenuDoTouch(Vec2 _touchPos, bool _isTouchEnd){    if(!m_isPauseMenuShow)    {        return false;    }        if(_isTouchEnd)    {        // 恢复弹起状态        uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_continue"), "an0");        uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_restart"), "an0");        uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_pingjia"), "an0");        uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_quit"), "an0");                if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_continue"), _touchPos))        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);            UI_PauseMenuSet(false);                        return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_restart"), _touchPos))        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);            UI_PauseMenuSet(false);            Map_Restart();                        return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_music_set"), _touchPos))        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);                        BaseMusic::Instance()->m_IsOpenMusic = !BaseMusic::Instance()->m_IsOpenMusic;            BaseMusic::Instance()->m_IsOpenSound = BaseMusic::Instance()->m_IsOpenMusic;            BaseMusic::Instance()->MusicControl();                        if(BaseMusic::Instance()->m_IsOpenMusic)            {                uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_music_set"), "an0");            }            else            {                uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_music_set"), "an1");            }                        return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_pingjia"), _touchPos))        {            // 保留，下个版本开启            BaseMusic::Instance()->SoundControl(sound_TouchPressed);            toOpenNetworkURL(GAME_APPSTROE_URL);            return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_quit"), _touchPos))        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);                        SceneManage::SWitchToScene(S_MainMenu);            return true;        }    }    else    {        if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_continue"), _touchPos))        {            uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_continue"), "an1");            return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_restart"), _touchPos))        {            uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_restart"), "an1");            return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_pingjia"), _touchPos))        {            uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_pingjia"), "an1");            return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_quit"), _touchPos))        {            uiPlay(uiGetChild(GamePlayTag_PauseMenuCsb, "btn_quit"), "an1");            return true;        }    }            return false;    }void GamePlay::UI_JieSuanMenuSet(bool _isShow){    m_isJieSuanMenuShow = _isShow;        // 广告现实逻辑    if(_isShow)    {        setAdViewShow(true);    }    else    {        if(DISP_IP5 == gDisplayMode || DISP_IP6_PLUS == gDisplayMode || DISP_IP6 == gDisplayMode)        {            setAdViewShow(true);        }        else        {            setAdViewShow(false);        }    }        if(_isShow)    {        SaveManager::Instance()->WriteData();        uiLoad(GamePlayTag_JieSuanMenuCsb, "ui_jiesuan_menu.csb", SCREEN_CENTER);                // 背景图片缩放，保证全屏显示        Node* objBg = uiGetChild(GamePlayTag_JieSuanMenuCsb, "ui_bg");        if(objBg)        {            objBg->setScale(3.0f, 3.0f);        }                // 计算当前关卡分数        int currScore = 0;        if(SaveManager::Instance()->m_GameMode == GameMode_Classic)        {            currScore = SaveManager::Instance()->m_ScoreCurr[0];        }        else        {            int mapLevelId = SaveManager::Instance()->m_MapLevelId;            if(mapLevelId >= 0 && mapLevelId < SaveManager_MaxLeve )            {                currScore = SaveManager::Instance()->m_ScoreCurr[mapLevelId];            }        }                // 设置分数显示        cocos2d:ui::Text* txtScoreMax = dynamic_cast<cocos2d::ui::Text*>(uiGetChild(GamePlayTag_JieSuanMenuCsb, "txt_score"));        if(txtScoreMax)        {            char bufNum[64] = "";            sprintf(bufNum, "%d", currScore);            txtScoreMax->setString(bufNum);        }    }    else    {        uiFree(GamePlayTag_JieSuanMenuCsb);    }     }bool GamePlay::UI_JieSuanMenuDoTouch(Vec2 _touchPos, bool _isTouchEnd){    if(!m_isJieSuanMenuShow)    {        return false;    }        if(_isTouchEnd)    {        // 恢复弹起状态        uiPlay(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_restart"), "an0");        uiPlay(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_quit"), "an0");                        if(isTouchOnNode(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_restart"), _touchPos))        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);            UI_JieSuanMenuSet(false);            Map_Restart();                        return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_quit"), _touchPos))        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);            SceneManage::SWitchToScene(S_MainMenu);                        return true;        }            }    else    {        if(isTouchOnNode(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_restart"), _touchPos))        {            uiPlay(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_restart"), "an1");            return true;        }        else if(isTouchOnNode(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_quit"), _touchPos))        {            uiPlay(uiGetChild(GamePlayTag_JieSuanMenuCsb, "btn_quit"), "an1");            return true;        }            }            return false;    }