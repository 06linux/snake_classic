/* *  Npc.h *  CCGame * *  Created by linux_wuliqiang@163.com on 2015-04-08. *  Copyright 2015 Beijing. All rights reserved. * *	游戏主菜单界面 * *  Npc死亡直接从管理器中，将Npc对象内存删除， 同时播放一个死亡特效，在死亡特效播放完成后，设置相应的回调 * * */#ifndef __Npc_H__#define __Npc_H__#include "Base.h"// Npc的逻辑状态typedef enum{    NpcState_Null = 0,        NpcState_Zhan,            // 站立    NpcState_Run,             // 行走    NpcState_Atk,             // 攻击    NpcState_Dead,            // 进入死亡状态 （播放死亡动画后，进行内存释放）      NpcState_End    }NpcState;// tag 标志位 (加载在 npc 身上的对象)typedef enum{    NpcTag_Null = 0,        NpcTag_AnShow,            // 动画显示    NpcTag_ParticleShow,     // 粒子显示效果            NpcTag_End    }NpcTag;typedef enum{    NpcType_Null = 0,        //-------------------------------------    // 游戏中的 npc    NpcType_Npc_Start = 100,            // Npc (默认)    NpcType_Npc_SnakeHead,              // 蛇头    NpcType_Npc_SnakeBody,              // 蛇身    NpcType_Npc_End,            //-------------------------------------    // 碰撞类型的 npc    NpcType_Bullet_Start = 200,    NpcType_Bullet_Food,                // 可以吃的物品    NpcType_Bullet_Wall,                // 墙体,不能碰撞    NpcType_Bullet_end,                //-------------------------------------    // 装饰显示的 npc    NpcType_Show_Start = 300,           // 特效显示    NpcType_Show_Test01,    NpcType_Show_Test02,    NpcType_Show_End,                NpcType_End    }NpcType;// 行走的方向数据typedef enum{    NpcRunDir_Null= 0,        NpcRunDir_Up,    NpcRunDir_Right,    NpcRunDir_Down,    NpcRunDir_Left,        NpcRunDir_End    }NpcRunDir;// 行走的方向数据typedef enum{    NpcActionId_Null= 0,        NpcActionId_MoveToMapGrid,      // 移动到指定地图网格        NpcActionId_End    }NpcActionId;class Npc : public BaseLayer{public:   	Npc();	~Npc();            // 回调函数    virtual void    actCallFun(Node* _node, int _actTag, const std::string& _varStr);  //  action 回调函数    public:  // 接口函数    virtual void    LoadNpc(int _idExcel);	virtual void    FreeNpc();    virtual int     UpdateLogic(float _dt);             // 更逻辑    virtual int     UpdatePaint(float _dt);             // 更新显示    virtual void    ToStatus(NpcState _newStatus);      // 状态切换        public:    void            SetSelect(bool _isSelect);    Vec2            GetMapGrid();       // 得到地图上的网格坐标    void            SetMapGrid(Vec2 _mapGrid);       // 设置位置，显示到指定网格坐标上    Vec2            GetLogicGrid();                 // 得到逻辑位置        void            MoveToMapGrid(Vec2 _mapGrid, float _moveTime);        bool            IsInMove();         // 是否正在移动中            public: // 数据成员        int             m_IdUnique;             // uid ，唯一的一个 id    int             m_IdExcel;              // 对应的配置表 id        NpcType         m_NpcType;              // 逻辑类型(决定当前npc 加载到哪个容器里面)    NpcState        m_NpcState;             // 当前Npc的逻辑状态        int             m_StopMove;             // 订制移动的次数，大于 0 ，表示当前回合暂时停止移动向下一个目标位置	Vec2            m_MoveToGrid;           // 移动的目标网格    Vec2            m_LogicGrid;            // 逻辑网格位置 （当前精灵的逻辑位置）    NpcRunDir       m_RunDir;               // 行走方向 （只有蛇头用到）    Npc*            m_Next;                 // 指向下一个对象    };#endif // __Npc_H__