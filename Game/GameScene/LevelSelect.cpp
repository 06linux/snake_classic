#include "LevelSelect.h"#include "SceneManage.h"#include "SaveManager.h"#include "GamePlay.h"Scene* LevelSelect::createScene(){    // 'scene' is an autorelease object    auto scene = Scene::create();        // 'layer' is an autorelease object    auto layer = LevelSelect::create();    // add layer as a child to scene    scene->addChild(layer);        // return the scene    return scene;}LevelSelect::LevelSelect(){    setTouchListener(true);    setKeyboardListener();}LevelSelect::~LevelSelect(){}void LevelSelect::onEnter(){    BaseLayer::onEnter();       	InitRes();    //schedule(schedule_selector(LevelSelect::Update),GAME_TIME_LEN);  // 开启定时器}void LevelSelect::onExit(){    unschedule(schedule_selector(LevelSelect::Update));        // 停止定时器	FreeRes();        BaseLayer::onExit();}void LevelSelect::InitRes(){    // 背景图片显示    Sprite* objBg = Sprite::create("ui_bg.png");    objBg->setScale(3.0f, 3.0f);    objBg->setPosition(SCREEN_CENTER);    addChild(objBg, LevelSelectTag_Background, LevelSelectTag_Background);        if(DISP_IP5 == gDisplayMode)    {        uiLoad(LevelSelectTag_LevelSelectCsb, "level_select_ip5.csb", Vec2(SCREEN_W/2, SCREEN_H/2));    }    else if(DISP_IPAD == gDisplayMode)    {        uiLoad(LevelSelectTag_LevelSelectCsb, "level_select.csb", Vec2(SCREEN_W/2, SCREEN_H/2));    }    else  // iphone4s    {        uiLoad(LevelSelectTag_LevelSelectCsb, "level_select.csb", Vec2(SCREEN_W/2, SCREEN_H/2));    }        uiScrollView_Init();    setAdViewShow(true);        if(DISP_IP6_PLUS == gDisplayMode)    {        setScale(2.0f);    }    else if(DISP_IP6 == gDisplayMode)    {        setScale(1.2f);    }}void LevelSelect::FreeRes(){}bool LevelSelect::onTouchBegan(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);    CCLOG("LevelSelect::onTouchBegan (%f,%f)", touchPoint.x, touchPoint.y);        // 退出游戏    if(isTouchOnNode(uiGetChild(LevelSelectTag_LevelSelectCsb, "btn_quit"), touchPoint))    {        uiPlay(uiGetChild(LevelSelectTag_LevelSelectCsb, "btn_quit"), "an1");    }            return true;}void LevelSelect::onTouchEnded(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);    CCLOG("LevelSelect::onTouchEnded (%f,%f)", touchPoint.x, touchPoint.y);        uiPlay(uiGetChild(LevelSelectTag_LevelSelectCsb, "btn_quit"), "an0");        // 返回主界面    if(isTouchOnNode(uiGetChild(LevelSelectTag_LevelSelectCsb, "btn_quit"), touchPoint))    {        BaseMusic::Instance()->SoundControl(sound_TouchPressed);        SceneManage::SWitchToScene(S_MainMenu);    }    }void LevelSelect::onTouchCancelled(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);            CCLOG("LevelSelect::onTouchCancelled (%f,%f)", touchPoint.x, touchPoint.y);}void LevelSelect::onTouchMoved(Touch *_touch, Event * _event){    Vec2 touchPoint = getTouch(_touch, _event);        CCLOG("LevelSelect::onTouchMoved (%f,%f)", touchPoint.x, touchPoint.y);}void LevelSelect::onKeyPressed(EventKeyboard::KeyCode _code, Event* _event){    }void LevelSelect::onKeyReleased(EventKeyboard::KeyCode _code, Event* _event){}void  LevelSelect::uiLastFrameCallFun(const std::string& _varStr){    CCLOG("LevelSelect::uiLastFrameCallFun, %s ", _varStr.c_str());    }void LevelSelect::uiFrameEventCallFun(cocostudio::timeline::Frame* _frame, const std::string& _varStr){    cocostudio::timeline::EventFrame* eventFrame = dynamic_cast<cocostudio::timeline::EventFrame*>(_frame);    if(eventFrame)    {        CCLOG("LevelSelect::uiFrameEventCallFun, event_name = %s,  varstr=%s ",eventFrame->getEvent().c_str(), _varStr.c_str());    }}void LevelSelect::arMovementEventCallFun(Armature *_objAr, MovementEventType _movementType, const std::string& _movementID, const std::string& _varStr){    CCLOG("LevelSelect::arMovementEventCallFun, %s ", _varStr.c_str());}void LevelSelect::arFrameEventCallFun(cocostudio::Bone *_bone, const std::string& _evt, int _originFrameIndex, int _currentFrameIndex, const std::string& _varStr){    CCLOG("LevelSelect::arFrameEventCallFun, %s ", _varStr.c_str());}void LevelSelect::actCallFun(Node* _node, int _actTag, const std::string& _varStr){    CCLOG("LevelSelect::actCallFun, actTag = %d, %s ",_actTag, _varStr.c_str());}void  LevelSelect::Update(float _dt){    CCLOG("LevelSelect::Update dt=(%f)", _dt);}void LevelSelect::uiScrollView_Init(){    cocos2d::ui::ScrollView*  view = dynamic_cast<cocos2d::ui::ScrollView*>(uiGetChild(LevelSelectTag_LevelSelectCsb, "scroll_view"));    if(view)    {        int itemHeight = 400;        float mapScale = 0.48;                // 初始化关卡列表        int levelCount = CSVFileReader::Instance()->GetTableRowCount(CSVTable_MapLevel);        for(int i=1; i<= levelCount; i++)        {            int levelId = levelCount - i +1;  // 当前关卡 id                        const char* pLevelName = CSVFileReader::Instance()->GetTableData(CSVTable_MapLevel, levelId, TB_MapLevel_Name);            const char* pMapName = CSVFileReader::Instance()->GetTableData(CSVTable_MapLevel, levelId, TB_MapLevel_MapName);            char bufMapName[128] = "";            //        if(DISP_IP5 == gDisplayMode)            //        {            //            sprintf(bufMapName, "%s_ip5.tmx",pMapName);            //        }            //        else if(DISP_IPAD == gDisplayMode)            //        {            //            sprintf(bufMapName, "%s_ipad.tmx",pMapName);            //        }            //        else  // iphone4s            {                sprintf(bufMapName, "%s.tmx",pMapName);            }                                    Node* obj = CSLoader::createNode("level_select_item.csb");            obj->setPosition(Vec2(view->getInnerContainerSize().width/2, 5+itemHeight/2 + itemHeight*(i-1)));            view->addChild(obj, levelId, levelId);                        // 加载地图            Node* mapNode = obj->getChildByName("node_map");            if(mapNode)            {                BaseTiledMap* objMap = BaseTiledMap::create(bufMapName);                                TMXLayer* tagLayer = objMap->getLayer(MAP_LAYER_TAG);                if(tagLayer)                {                    tagLayer->setVisible(false);                }                                objMap->setPosition(Vec2(-20*16*mapScale, -23*16*mapScale));                objMap->setScale(mapScale, mapScale);                mapNode->addChild(objMap, 100, 100);            }                        // 设置关卡名称            cocos2d::ui::Text* txtName = dynamic_cast<cocos2d::ui::Text*>(obj->getChildByName("txt_name"));            if(txtName)            {                txtName->setString(pLevelName);            }                        // 设置最高分            cocos2d::ui::Text* txtMaxScore = dynamic_cast<cocos2d::ui::Text*>(obj->getChildByName("txt_max_score"));            if(txtMaxScore)            {                int maxScore = 0;                if(levelId >= 0 && levelId < SaveManager_MaxLeve )                {                    maxScore = SaveManager::Instance()->m_ScoreMax[levelId];                }                                char bufNum[64] = "";                sprintf(bufNum, "%d", maxScore);                txtMaxScore->setString(bufNum);            }                }                // 设置滚动区域大小        Size viewSize = view->getInnerContainerSize();        viewSize = Size(viewSize.width, levelCount*itemHeight+10);        view->setInnerContainerSize(viewSize);                // 设置触摸回调函数        view->addTouchEventListener(CC_CALLBACK_0(LevelSelect::uiScrollView_onTouchEvent, this, std::placeholders::_1,std::placeholders::_2));            }}void LevelSelect::uiScrollView_DoTouch(Vec2 _touchPos, bool _isTouchEnd){    // 列表按下逻辑    cocos2d::ui::ScrollView*  view = dynamic_cast<cocos2d::ui::ScrollView*>(uiGetChild(LevelSelectTag_LevelSelectCsb, "scroll_view"));    if(view)    {        bool isDoTouch = false;                auto& children = view->getChildren();        for (auto child : children)        {            if(isTouchOnNode(child, _touchPos))            {                isDoTouch = true;                SaveManager::Instance()->m_MapLevelId =  child->getTag();                break;            }        }                if(isDoTouch)        {            BaseMusic::Instance()->SoundControl(sound_TouchPressed);            SceneManage::SWitchToScene(S_GamePlay);        }    }}void LevelSelect::uiScrollView_onTouchEvent(cocos2d::Ref *ref, ui::Widget::TouchEventType touchType){    CCLOG("LevelSelect::uiScrollView_onTouchEvent touchType=(%d)", touchType);        ui::ScrollView* sView = dynamic_cast<ui::ScrollView*>(ref);    if(sView)    {        switch (touchType)        {            case ui::Widget::TouchEventType::BEGAN:            {                //Vec2 touchPoint = sView->getTouchBeganPosition();                //CCLOG("LevelSelect::uiScrollView_onTouchEvent BEGAN=(%f,%f)", touchPoint.x,touchPoint.y);            }                break;            case ui::Widget::TouchEventType::MOVED:            {                //Vec2 touchPoint = sView->getTouchMovePosition();                //CCLOG("LevelSelect::uiScrollView_onTouchEvent MOVED=(%f,%f)", touchPoint.x,touchPoint.y);            }                break;            case ui::Widget::TouchEventType::ENDED:            {                Vec2 touchPointBegan = sView->getTouchBeganPosition();                Vec2 touchPointEnd = sView->getTouchEndPosition();                                if(touchPointBegan.distance(touchPointEnd) < 10)                {                    uiScrollView_DoTouch(touchPointEnd, true);                }            }                break;            case ui::Widget::TouchEventType::CANCELED:            {                CCLOG("LevelSelect::uiScrollView_onTouchEvent CANCELED");            }                break;            default:                break;        }    }}